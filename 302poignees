#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

import sys
from math import *

separe = "est ami avec"
separe_2 = "est amie avec"
guys = {}

def     parsing_file(_file):
   for line in _file:
      if (line.find(separe) != -1):
         line = line.replace(separe, "")
         tmp = line.split(" ")
         tmp2 = ""
         for line in tmp:
            if (line != ""):
               if (tmp2 == ""):
                  tmp2 = line
               else:
                  tmp2 = tmp2 + " " + line
               if (line.find("\n") != -1):
                  guys[last_name].append(tmp2[:tmp2.rfind('\'')])
                  tmp2 = tmp2[:tmp2.rfind('\'')]
                  if ((tmp2 in guys.keys()) == False):
                     guys[tmp2] = []
                  guys[tmp2].append(last_name)
                  tmp2 = ""
            elif (line == ""):
               if ((tmp2 in guys.keys()) == False):
                  guys[tmp2] = []
               last_name = tmp2
               tmp2 = ""
      elif (line.find(separe_2) != -1):
         line = line.replace(separe_2, "")
         tmp = line.split(" ")
         tmp2 = ""
         for line in tmp:
            if (line != ""):
               if (tmp2 == ""):
                  tmp2 = line
               else:
                  tmp2 = tmp2 + " " + line
               if (line.find("\n") != -1):
                  guys[last_name].append(tmp2[:tmp2.rfind('\'')])
                  tmp2 = tmp2[:tmp2.rfind('\'')]
                  if ((tmp2 in guys.keys()) == False):
                     guys[tmp2] = []
                  guys[tmp2].append(last_name)
            elif (line == ""):
               if ((tmp2 in guys.keys()) == False):
                  guys[tmp2] = []
               last_name = tmp2
               tmp2 = ""

def     Connection(name1, name2, lvl, passed):
   if ((name1 in guys.keys()) == False):
      return (-1)
   if ((name2 in guys.keys()) == False):
      return (-1)
   tmp = dict(passed)
   result = list()
   if (name1 == name2):
      return (0)
   if ((name1 in guys[name2]) == True):
      return (lvl + 1)
   tmp[name2] = 1
   for x in guys[name2]:
      if ((x in tmp.keys()) == False):
         toto = Connection(name1, x, lvl + 1, tmp)
         if (toto != -1):
            result.append(toto)
   if (len(result) == 0):
      return (-1)
   return (min(result))

def     print_name():
   for x in sorted(guys.keys()):
      print x
   print

def     print_matr_adj(passed):
   tab = [[]]
   cpt = 0
   for x in sorted(guys.keys()):
      tab.append([])
      for x2 in sorted(guys.keys()):
         if ((Connection(x, x2, 0, passed)) != 1):
            tab[cpt].append(0)
         else:
            tab[cpt].append(1)
      print (tab[cpt])
      cpt = cpt + 1
   print

def     print_matr_base(lvl, passed, n):
   tab = [[]]
   cpt = 0
   nv = 0
   for x in sorted(guys.keys()):
      tab.append([])
      for x2 in sorted(guys.keys()):
         nv = Connection(x, x2, 0, passed)
         if (nv > n):
            tab[cpt].append(0)
         else:
            tab[cpt].append(nv)
      print (tab[cpt])
      cpt = cpt + 1

def     main():
   try:
      file = open(sys.argv[1])
      tmp = file.readlines()
      parsing_file(tmp)
   except:
      print "argument not valid"
      return 84
   _len = len(sys.argv)
   dict_tmp = {}                       
   if (_len == 3):
      try:
         n = int(sys.argv[2])
      except:
         print "Error with the second argument."
         return 84
      print_name()
      print_matr_adj(dict_tmp)
      print_matr_base(0, dict_tmp, n)
      return 0
   elif (_len == 4):
      lvl = Connection(sys.argv[2], sys.argv[3], 0, dict_tmp)
      print "degré de séparation entre", sys.argv[2], "et", sys.argv[3], ":", lvl
      return 0
   else:
      print "argument not valid"
      return 84

if __name__ == '__main__':
   sys.exit(main())

